# [START swagger]
swagger: "2.0"
host: "api.endpoints.sundaya.cloud.goog"
x-google-endpoints:
- name: "api.endpoints.sundaya.cloud.goog"
  target: "34.80.69.65"
basePath: "/"
info:
  title: "Energy Management"
  version: "0.0.07"
  description: |
    The Energy Management API is based on four energy **Types**:

    `harvest`, `store`, `enjoy`, `grid`
    
    The `/energy` path provides periodic consolidation of data from energy monitoring devices (*week*, *month* etc.) 
    
    API clients can manage energy **Assets** through graphical views and by scheduling energy use at preferred times. 
    
    The `/devices` path is for vendors and field engineers to monitor and control the operation of energy management **Devices**.
    
    Type | Assets | Devices
    --- | --- | ---
    `harvest` | Renewables | PV Modules, Maximum Power Point Trackers (MPPT)
    `store` | Storage | Busbar Controllers (BBC), Pack Management Systems (PMS)
    `enjoy` | Appliances | Multicore-Cable Current Sensors, Switchboard Clamp Sensors
    `grid` | Mains Electricity | Smart Meters, PV Grid-interactive Inverters
    
  license:
    name: "Creative Commons Attribution 4.0 International"
    url: "http://creativecommons.org/licenses/by/4.0/"
  termsOfService: "https://sundaya.com/terms-of-service/"
# [END swagger]
schemes:
# Uncomment after configuring SSL.
#- "https"
- "http"
paths:
  "/api/versions":
    get:
      description: "Returns a list of versions which are still supported. Older versions can be requested through the `Accept` request header (see _Versions_ in [`Standards & Conventions`](https://endpointsportal.sundaya.cloud.goog/docs/api.endpoints.sundaya.cloud.goog/0/c/Getting%20Started/Standards%20&%20Conventions))."
      operationId: "diagnostics.api.versions.get"
      consumes:
      - ""
      produces:
      - "application/json"
      responses:
        "200":
          $ref: "#/responses/200-ok"
        "401":
          $ref: "#/responses/401-unauthorized"
        "500":
          $ref: "#/responses/500-internal-server-error"
      tags:
        - "Diagnostics"
  "/energy/{energy}/periods/{period}/{epoch}/{duration}":
    get:
      description: "Retrieves energy monitoring data for a period. [Try this API](http://api.endpoints.sundaya.cloud.goog/energy/hse/periods/week/20150204/1?site=999)"
      operationId: "energy.type.period.epoch.get"
      consumes:
      - "application/json"
      produces:
      - "application/vnd.collection+json"
      - "application/json"
      - "text/html"
      - "text/plain"
      parameters:
      - $ref: "#/parameters/energy"  
      - $ref: "#/parameters/period"
      - $ref: "#/parameters/epoch"
      - $ref: "#/parameters/duration"
      - $ref: "#/parameters/site"
      - $ref: "#/parameters/product-catalogue-items"
      responses:
        "200":
          $ref: "#/responses/200-energy-data"
        "400":
          $ref: "#/responses/400-bad-request"
        "401":
          $ref: "#/responses/401-unauthorized"
        "404":
          $ref: "#/responses/404-not-found"
        "415":
          $ref: "#/responses/415-unsupported-media-type"
        "500":
          $ref: "#/responses/500-internal-server-error"
      tags:
        - "Energy" 
  "/devices/{device}/config/{epoch}":
    get:
      description: "Returns historical configuration data including identifiers of subitems such as battery assembly, MCU board, and Mosfet board. . [Try this API](http://api.endpoints.sundaya.cloud.goog/devices/999)"
      operationId: "devices.device.config.epoch.get"
      consumes:
      - ""
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/device"
      - $ref: "#/parameters/epoch"
      responses:
        "200":
          $ref: "#/responses/200-ok"
        "400":
          $ref: "#/responses/400-bad-request"
        "401":
          $ref: "#/responses/401-unauthorized"
        "404":
          $ref: "#/responses/404-not-found"
        "415":
          $ref: "#/responses/415-unsupported-media-type"
        "500":
          $ref: "#/responses/500-internal-server-error"
      tags:
        - "Devices"
  "/devices/{device}/datasets/{dataset}":
    post:
      description: "Logs monitoring data for a device."
      operationId: "devices.device.dataset.post"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/device"
      - $ref: "#/parameters/device-dataset"
      - $ref: "#/parameters/device-dataset-data"
      responses:
        "201":
          $ref: "#/responses/201-created"
        "400":
          $ref: "#/responses/400-bad-request"
        "401":
          $ref: "#/responses/401-unauthorized"
        "500":
          $ref: "#/responses/500-internal-server-error"
      tags:
        - "Devices"
parameters:
  energy:
    name: "energy"
    in: path
    description: "The type of energy flow."
    type: string
    default: "hse"
    enum:
      - "hse"
      - "harvest"
      - "store"
      - "enjoy"
      - "grid"
  period:
    name: "period"
    in: path
    description: "The time window for which total energy is aggregated. The only exception is 'instant' which measures energy at a single point in time, without aggregation."
    type: string
    default: "week"
    enum:
      - "instant"
      - "second"
      - "minute"
      - "hour"
      - "timeofday"
      - "day"
      - "week"
      - "month"
      - "quarter"
      - "year"
      - "fiveyear"
  epoch:
    name: "epoch"
    in: path
    description: "The start date (and time) of the period, in compressed `ISO 8601/RFC3339` (YYYYMMDDThhmmssÂ±hhmm) and based on the period."
    type: string
    format: date-time
    default: "20190325"
  duration:
    name: "duration"
    in: path
    description: "The number of periods to return starting at epoch. This defaults to 1."
    type: integer
    format: int64
  site:  
    name: "site"
    in: query
    required: true
    description: "Identifier of the customer site where energy assets have been installed."
    type: string
  device:
    name: "device"
    in: path
    description: "The device identifier."
    type: string
  device-dataset:  
    name: "device-dataset"
    in: path
    description: "The type of dataset."
    type: string
    enum:
      - "MPPT-SNMP"
      - "PMS-EPACK"
  device-dataset-data:
    name: "device-dataset-data"
    in: body
    required: true
    description: "Data to be logged."
    schema:
      description: "Device data items collection."
      type: object
      properties:
        href:
          type: string
        items:
          type: array
          items:
            type: object
            required:
            - "data"
            properties:
              data:
                $ref: "#/definitions/collectionDataDetail"
  product-catalogue-items:
    name: "product-catalogue-items"
    in: body
    required: false
    description: "An optional product filter to restrict data to specific categories, subcategories and product types."
    schema:
      description: "Product categories."
      type: object
      properties:
        product-catalogue-items:
          items:
            $ref: '#/definitions/productCatalogueItem'
          type: array
responses:
  200-ok:
    description: "Data retrieved."
    schema:
      $ref: "#/definitions/genericMessage"
  201-created:
    description: "Resource created."
    schema:
      $ref: "#/definitions/genericMessage"
    headers:
      Location:
        description: "A [Location](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.30) header pointing to the location of the new resource."
        type: string
  400-bad-request:
    description: "The client specified an invalid argument"
    schema:
      $ref: "#/definitions/genericMessage"
  401-unauthorized:
    description: "The client does not have sufficient permission."
    schema:
      $ref: "#/definitions/genericMessage"
  404-not-found:
    description: "The resource was not found."
    schema:
      $ref: "#/definitions/genericMessage"
  415-unsupported-media-type:
    description: "The requested Accept header type is not supported."
    schema:
      $ref: "#/definitions/genericMessage"
  500-internal-server-error:
    description: "The server encountered an unexpected condition."
    schema:
      $ref: "#/definitions/genericMessage"
  200-energy-data:
    description: "Energy data items collection."
    schema:
      type: object
      properties:
        collection:
          $ref: "#/definitions/collection"
definitions:
  collection:
    description: "A Collection+JSON message consisting of Items and Data."
    type: object
    required:
    - "version"
    - "href"
    - "links"
    - "items"
    properties:
      version:
        type: string
      href:
        type: string
      links:
        $ref: "#/definitions/collectionLinks"
      items:
        $ref: "#/definitions/collectionItems"
  collectionItems:
    description: "Items container for Links and Data in a Collection+JSON message."
    type: array
    items:
      type: object
      required:
      - "href"
      - "links"
      - "data"
      properties:
        href:
          type: string
        links:
          $ref: "#/definitions/collectionLinks"
        data:
          $ref: "#/definitions/collectionData"    
  collectionData:
    description: "Top level Data in a Collection+JSON message."
    type: array
    items:
      type: object
      required:
      - "name"
      - "value"
      - "data"
      properties:
        name:
          type: string
        value:
          type: string
        data:
          $ref: "#/definitions/collectionDataDetail"
  collectionDataDetail:
    description: "Second level Data in a Collection+JSON message."
    type: array
    items:
      type: object
      required:
      - "name"
      - "value"
      properties:
        name:
          type: string
        value:
          type: string
  collectionLinks:
    description: "Links in a Collection+JSON message."
    type: array
    items:
      type: object
      required:
      - "rel"
      - "name"
      - "prompt"
      - "title"
      - "href"
      - "render"
      properties:
        rel:
          type: string
        name:
          type: string
        prompt:
          type: string
        title:
          type: string
        href:
          type: string
        render:
          type: string
  genericMessage:
    description: "Code and status with message details."
    type: object
    properties:
      code:
        description: "The response or error code."
        type: string
        example: "200"
      status:
        description: "The status of the response or error."
        type: string
        example: "Illegal input for operation."
      details:
        type: array
        items:
          $ref: "#/definitions/genericMesssageDetail"
  genericMesssageDetail:
    description: "Message details provide additional information about a message target."
    type: object
    properties:
      message:
        description: "The message text."
        type: string
        example: "NullValue"
      target:
        description: "The target of the message."
        type: string
        example: "period parameter"
  productCatalogueItem:
    description: "A product catalogue item definition."
    type: object
    properties:
      product-category:
        description: "A valid product Category."
        type: string
        example: "Solutions"
        enum:
        - "Components"
        - "Solutions"
        - "Solutions & Components"
      product-subcategory:
        description: "A valid Subcategory for the provided product Category."
        type: string
        example: "Solar Home Kits"
        enum:
        - "Harvest"
        - "Counting"
        - "Replacing"
        - "Solar Home Kits"
        - "Saving & Enjoy"   
      product-type:
        description: "A valid product Type for the product Category and Subcategory."
        type: string
        example: "JouleBox"
        enum:
        - "Electricity Meter"
        - "LED Lighting"
        - "Air Conditioning"
        - "Industrial PV"
        - "Residential PV"
        - "Home Battery"
        - "Ulitium"
        - "JouleBox"
        - "PV Solar Panel"
# This section requires all requests to any path to require an API key.
security:
- api_key: []
securityDefinitions:
  # This section configures basic authentication with an API key.
  api_key:
    type: "apiKey"
    name: "key"
    in: query
  # This section configures authentication using Google API Service Accounts
  # to sign a json web token. This is mostly used for server-to-server
  # communication.
  google_jwt:
    authorizationUrl: ""
    flow: "implicit"
    type: "oauth2"
    # This must match the 'iss' field in the JWT.
    x-google-issuer: "jwt-client.endpoints.sample.google.com"
    # Update this with your service account's email address.
    x-google-jwks_uri: "https://www.googleapis.com/service_accounts/v1/jwk/YOUR-SERVICE-ACCOUNT-EMAIL"
    # This must match the "aud" field in the JWT. You can add multiple
    # audiences to accept JWTs from multiple clients.
    x-google-audiences: "echo.endpoints.sample.google.com"
  # This section configures authentication using Google OAuth2 ID Tokens.
  # ID Tokens can be obtained using OAuth2 clients, and can be used to access
  # your API on behalf of a particular user.
  google_id_token:
    authorizationUrl: ""
    flow: "implicit"
    type: "oauth2"
    x-google-issuer: "https://accounts.google.com"
    x-google-jwks_uri: "https://www.googleapis.com/oauth2/v3/certs"
    # Your OAuth2 client's Client ID must be added here. You can add
    # multiple client IDs to accept tokens from multiple clients.
    x-google-audiences: "YOUR-CLIENT-ID"

